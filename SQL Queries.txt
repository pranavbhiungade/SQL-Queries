CREATE DATABASE ORG1;
-- SHOW DATABASES;
USE ORG1;

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

CREATE TABLE Emp (
	Id INT NOT NULL PRIMARY KEY,
	empName CHAR(25),
	address CHAR(25)
);
CREATE TABLE Dept (
	Did INT NOT NULL PRIMARY KEY,
	DName CHAR(25),
    Id int,
	foreign key (Did) references Emp(Id)
);

INSERT INTO Emp (Id, empName, address) VALUES (1, 'John Doe', '123 Elm St');
INSERT INTO Emp (Id, empName, address) VALUES (2, 'Jane Smith', '456 Oak St');
INSERT INTO Emp (Id, empName, address) VALUES (3, 'Alice Johnson', '789 Pine St');
INSERT INTO Emp (Id, empName, address) VALUES (4, 'Michael Brown', '101 Maple St');
INSERT INTO Emp (Id, empName, address) VALUES (5, 'Emily Davis', '202 Birch St');
INSERT INTO Emp (Id, empName, address) VALUES (6, 'William Wilson', '303 Cedar St');
INSERT INTO Emp (Id, empName, address) VALUES (7, 'Olivia Martinez', '404 Walnut St');

INSERT INTO Dept (Did, DName, Id) VALUES (1, 'HR', 1);
INSERT INTO Dept (Did, DName, Id) VALUES (2, 'IT', 2);
INSERT INTO Dept (Did, DName, Id) VALUES (3, 'Finance', 3);

-- correlated subquery 
select * from Emp where exists (select * from Dept where Dept.Id = Emp.Id);

--  using inner join
select Emp.Id,Emp.empName,Emp.address from Emp inner join Dept on Dept.Id = Emp.Id; 

-- without using join or correlated subquery
select * from Emp where Emp.Id in (select Dept.Id from Dept); 

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');
        
SELECT * FROM Worker;

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');
        
CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', '2016-02-20 00:00:00'),
 (002, 'Executive', '2016-06-11 00:00:00'),
 (008, 'Executive', '2016-06-11 00:00:00'),
 (005, 'Manager', '2016-06-11 00:00:00'),
 (004, 'Asst. Manager', '2016-06-11 00:00:00'),
 (007, 'Executive', '2016-06-11 00:00:00'),
 (006, 'Lead', '2016-06-11 00:00:00'),
 (003, 'Lead', '2016-06-11 00:00:00');
 

-- Q-1. Write an SQL query to fetch “FIRST_NAME” from Worker table using the alias name as <WORKER_NAME>.
  select FIRST_NAME as WORKER_NAME from Worker;
  
  -- Q-2. Write an SQL query to fetch “FIRST_NAME” from Worker table in upper case.
  select upper(FIRST_NAME) from Worker;
  
  -- Q-3. Write an SQL query to fetch unique values of DEPARTMENT from Worker table.
  select distinct DEPARTMENT from Worker;

-- Q-4. Write an SQL query to print the first three characters of  FIRST_NAME from Worker table.
select substring(FIRST_NAME,1,3) from Worker;
select left(FIRST_NAME,3) from Worker;
select right(FIRST_NAME,3) from Worker;

-- Q-5. Write an SQL query to find the position of the alphabet (‘b’) in the first name column ‘Amitabh’ from Worker table.
select instr(FIRST_NAME,'a') from Worker where FIRST_NAME = 'Amitabh' or FIRST_NAME ="Monika";
-- // if not found then it returns 0
-- locate('a',FIRST_NAME) can also be used
-- instr() returns first index
-- both return first occurence of that character 

-- Q-6. Write an SQL query to print the FIRST_NAME from Worker table after removing white spaces from the right side.
select rtrim(FIRST_NAME) from Worker;

-- Q-7. Write an SQL query to print the DEPARTMENT from Worker table after removing white spaces from the left side.
select ltrim(DEPARTMENT) from Worker;

-- Q-8. Write an SQL query that fetches the unique values of DEPARTMENT from Worker table and prints its length.
select distinct DEPARTMENT,length(DEPARTMENT) from Worker;

-- Q-9. Write an SQL query to print the FIRST_NAME from Worker table after replacing ‘a’ with ‘A’.
select replace(SALARY,'0','') from Worker;
select * from Worker; 

-- Q-10. Write an SQL query to print the FIRST_NAME and LAST_NAME from Worker table into a single column COMPLETE_NAME.
-- A space char should separate them.
select concat(FIRST_NAME,' ',LAST_NAME) as COMPLETE_NAME from Worker;
-- use comma and not + sign 

-- Q-11. Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
select * from Worker order by FIRST_NAME ASC;

-- Q-12. Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT Descending.
select * from Worker order by FIRST_NAME ASC,DEPARTMENT DESC;

-- Q-13. Write an SQL query to print details for Workers with the first name as “Vipul” and “Satish” from Worker table.
select * from Worker where FIRST_NAME IN ('Vipul','Satish');

-- Q-14. Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from Worker table.
select * from Worker where FIRST_NAME NOT IN ('Vipul','Satish');

-- Q-15. Write an SQL query to print details of Workers with DEPARTMENT name as “Admin*”.
select * from Worker where DEPARTMENT = 'Admin';

-- Q-16. Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.
select * from Worker where FIRST_NAME LIKE '%a%';

-- Q-17. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘a’.
select * from Worker where FIRST_NAME LIKE '%a';

-- Q-18. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.
select * from Worker where FIRST_NAME LIKE '%h' and length(FIRST_NAME) = 6;

-- Q-19. Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
select * from Worker where SALARY between 100000 and 500000;
-- both as included 

-- Q-20. Write an SQL query to print details of the Workers who have joined in Feb’2014.
select * from Worker where month(JOINING_DATE) = 2;
-- monthname() function also exists

-- Q-21. Write an SQL query to fetch the count of employees working in the department ‘Admin’.
select count(*) as Admin_count from Worker where DEPARTMENT = 'Admin';

-- Q-22. Write an SQL query to fetch worker full names with salaries >= 50000 and <= 100000.
select FIRST_NAME,LAST_NAME from Worker where SALARY between 50000 and 100000; 

-- Q-23. Write an SQL query to fetch the no. of workers for each department in the descending order.
select DEPARTMENT,count(*) as count_worker from Worker group by DEPARTMENT order by count_worker desc; 

-- Q-24. Write an SQL query to print details of the Workers who are also Managers.
select * from Worker ,Title where Worker.WORKER_ID = Title.WORKER_REF_ID and Title.WORKER_TITLE = 'Manager';  -- without inner join 
select * from Worker as W inner join Title as T on W.WORKER_ID=T.WORKER_REF_ID where T.WORKER_TITLE = 'Manager'; -- with inner join

-- Q-25. Write an SQL query to fetch number (more than 1) of same titles in the ORG of different types.
select WORKER_TITLE as T,count(*) as title_count from Title group by T having title_count>1 order by title_count;

-- Q-26. Write an SQL query to show only odd rows from a table.
select * from Worker where worker_id%2=1;

-- Q-27. Write an SQL query to show only even rows from a table. 
select * from Worker where worker_id%2=0;

-- Q-28. Write an SQL query to clone a new table from another table.
create table clone as (select * from worker);
select * from clone;

-- Q-29. Write an SQL query to fetch intersecting records of two tables.
-- inner join

-- Q-30. Write an SQL query to show records from one table that another table does not have.
-- MINUS 
-- left join


-- Q-31. Write an SQL query to show the current date and time.
-- DUAL
select curdate();
select now();

-- Q-32. Write an SQL query to show the top n (say 5) records of a table order by descending salary.
select * from Worker order by WORKER_ID DESC LIMIT 5;

-- Q-33. Write an SQL query to determine the nth (say n=5) highest salary from a table.
SELECT * from Worker order by SALARY desc LIMIT 5,1; -- 5th highest
select * from (select * from Worker order by salary limit 5) as subquery order by Salary desc limit 1;

-- Q-35. Write an SQL query to fetch the list of employees with the same salary.
select w1.* from Worker w1,Worker w2 where w1.salary = w2.salary and w1.worker_id!=w2.worker_id;

-- Q-36. Write an SQL query to show the second highest salary from a table using sub-query.
select max(salary) from Worker where salary < (select max(salary) from Worker);
-- very important question 

-- Q-37. Write an SQL query to show one row twice in results from a table.
select * from Worker UNION ALL select * from worker order by worker_id;

-- Q-38. Write an SQL query to list worker_id who does not get bonus.
select worker_id from Worker where worker_id not in (select worker_ref_id from bonus);

-- Q-39. Write an SQL query to fetch the first 50% records from a table.
select * from Worker where worker_id <= (select count(worker_id)/2 from Worker);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');
        
-- Q-40. Write an SQL query to fetch the departments that have less than 4 people in it.
select DEPARTMENT from Worker group by DEPARTMENT having count(DEPARTMENT)<4;

-- Q-41. Write an SQL query to show all departments along with the number of people in there.
select DEPARTMENT,count(WORKER_ID) from WORKER group by DEPARTMENT order by DEPARTMENT;

-- Q-42. Write an SQL query to show the last record from a table.
select * from WORKER order by Worker_id desc limit 1; 
select * from WORKER where WORKER_ID = (select max(Worker_id) from WORKER);

-- Q-43. Write an SQL query to fetch the first row of a table.
select * from WORKER where WORKER_ID = (select min(Worker_id) from WORKER);

-- Q-44. Write an SQL query to fetch the last five records from a table.
(select * from Worker order by worker_id desc limit 5) order by worker_id;

-- Q-45. Write an SQL query to print the name of employees having the highest salary in each department.
select FIRST_NAME from WORKER where salary in (select max(salary) as maxsal from worker group by department);

-- Q-46. Write an SQL query to fetch three max salaries from a table using co-related subquery
select distinct(Salary) from Worker order by Salary desc limit 3;

-- DRY RUN AFTER REVISING THE CORELATED SUBQUERY CONCEPT FROM LEC-9.
select salary from worker w1 where 3>= (select count(salary) from worker w2 where w2.salary>=w1.salary);

-- Q-47. Write an SQL query to fetch three min salaries from a table using co-related subquery
select salary from worker w1 where 3>= (select count(salary) from worker w2 where w2.salary<=w1.salary) order by salary desc;

-- Q-48. Write an SQL query to fetch nth max salaries from a table.
-- done 

-- Q-49. Write an SQL query to fetch departments along with the total salaries paid for each of them.
select DEPARTMENT,SUM(SALARY) FROM WORKER GROUP BY DEPARTMENT;

-- Q-50. Write an SQL query to fetch the names of workers who earn the highest salary.
SELECT FIRST_NAME,SALARY FROM WORKER WHERE SALARY = (SELECT MAX(SALARY) FROM WORKER);
-- without limit
-- with subquery  

-- TO DO  
-- Q-34. Write an SQL query to determine the 5th highest salary without using LIMIT keyword.
 select distinct(salary) from worker w1 where 4 = (select count((w2.salary)) from worker w2 where w2.salary>=w1.salary);
 -- vimp correlated subquery 
 select * from Worker;
 
 
 
 
-- 


  
  
  
 
 























