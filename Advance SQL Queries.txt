show databases;
create database chatgpt_practice;
use chatgpt_practice;
show tables;

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    EmployeeName VARCHAR(100),
    DepartmentID INT,
    Salary DECIMAL(10, 2),
    HireDate DATE,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);

CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY,
    ProjectName VARCHAR(100),
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

CREATE TABLE EmployeeProjects (
    EmployeeID INT,
    ProjectID INT,
    PRIMARY KEY (EmployeeID, ProjectID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (ProjectID) REFERENCES Projects(ProjectID)
);

CREATE TABLE Salaries (
    EmployeeID INT,
    Salary DECIMAL(10, 2),
    EffectiveDate DATE,
    PRIMARY KEY (EmployeeID, EffectiveDate),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

CREATE TABLE Attendance (
    EmployeeID INT,
    AttendanceDate DATE,
    Status VARCHAR(10),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);
-- insert queries

INSERT INTO Departments (DepartmentID, DepartmentName)
VALUES
(1, 'Engineering'),
(2, 'Sales'),
(3, 'Marketing'),
(4, 'HR');

INSERT INTO Projects (ProjectID, ProjectName, DepartmentID)
VALUES
(201, 'Project Alpha', 1),
(202, 'Project Beta', 1),
(203, 'Project Gamma', 2),
(204, 'Project Delta', 3),
(205, 'Project Epsilon', 4);

INSERT INTO Employees (EmployeeID, EmployeeName, DepartmentID, Salary, HireDate)
VALUES
(101, 'John Doe', 1, 70000, '2020-05-15'),
(102, 'Jane Smith', 2, 65000, '2019-08-20'),
(103, 'Emily Davis', 3, 60000, '2018-10-12'),
(104, 'Michael Brown', 1, 72000, '2017-02-23'),
(105, 'Sarah Johnson', 4, 50000, '2021-03-29'),
(106, 'Chris Lee', 2, 64000, '2022-07-14'),
(107, 'Anna White', 3, 62000, '2023-01-18');

-- 32. Get the list of employees who work on projects that no one else works on.
select * from employees e inner join employeeprojects ep on e.EmployeeID = ep.EmployeeID where ep.ProjectID =  (select ProjectID from EmployeeProjects group by ProjectID having count(EmployeeID)<2);

-- 34. List employees whose salary is higher than the highest salary in the "Sales" department.
select * from employees where salary > (select max(salary) from employees e inner join Departments D on e.DepartmentID = D.DepartmentID where DepartmentName = 'Sales');

-- 32. Get the list of employees who work on projects that no one else works on.
select * from employees e inner join employeeprojects ep on e.EmployeeID = ep.EmployeeID where ep.ProjectID =  (select ProjectID from EmployeeProjects group by ProjectID having count(EmployeeID)<2);
-- when group by is returning multiple rows subquery wont work

 INSERT INTO Employees (EmployeeID, EmployeeName, DepartmentID, Salary, HireDate)
VALUES
(101, 'John Doe', 1, 70000, '2020-05-15'),
(102, 'Jane Smith', 2, 65000, '2019-08-20'),
(103, 'Emily Davis', 3, 60000, '2018-10-12'),
(104, 'Michael Brown', 1, 72000, '2017-02-23'),
(105, 'Sarah Johnson', 4, 50000, '2021-03-29'),
(106, 'Chris Lee', 2, 64000, '2022-07-14'),
(107, 'Anna White', 3, 62000, '2023-01-18');
INSERT INTO EmployeeProjects (EmployeeID, ProjectID)
VALUES
(101, 201),
(101, 202),
(102, 203),
(103, 204),
(104, 201),
(104, 202),
(105, 205),
(106, 203),
(107, 204);

-- 11. **List all projects with the number of employees assigned to each project.**
select p.ProjectName,count(employeeID) as EmployeeCount from EmployeeProjects ep inner join Projects p on p.ProjectID = ep.ProjectID group by p.ProjectName;

-- 3. **Find employees who are working on more than one project.**
select e.*,count(p.ProjectID) as ProjectCount from Employees e inner join EmployeeProjects p on e.EmployeeID = p.EmployeeID group by e.EmployeeID having ProjectCount > 1;

INSERT INTO Salaries (EmployeeID, Salary, EffectiveDate)
VALUES
(101, 68000, '2019-01-01'),
(101, 70000, '2020-05-15'),
(102, 63000, '2018-07-01'),
(102, 65000, '2019-08-20'),
(103, 58000, '2017-09-01'),
(103, 60000, '2018-10-12'),
(104, 70000, '2016-12-01'),
(104, 72000, '2017-02-23'),
(105, 48000, '2020-02-01'),
(105, 50000, '2021-03-29'),
(106, 62000, '2021-06-01'),
(106, 64000, '2022-07-14'),
(107, 61000, '2022-12-01'),
(107, 62000, '2023-01-18');

INSERT INTO Attendance (EmployeeID, AttendanceDate, Status)
VALUES
(101, '2023-08-01', 'Present'),
(101, '2023-08-02', 'Present'),
(101, '2023-08-03', 'Absent'),
(102, '2023-08-01', 'Present'),
(102, '2023-08-02', 'Present'),
(102, '2023-08-03', 'Present'),
(103, '2023-08-01', 'Absent'),
(103, '2023-08-02', 'Present'),
(103, '2023-08-03', 'Present'),
(104, '2023-08-01', 'Present'),
(104, '2023-08-02', 'Absent'),
(104, '2023-08-03', 'Present'),
(105, '2023-08-01', 'Present'),
(105, '2023-08-02', 'Present'),
(105, '2023-08-03', 'Present'),
(106, '2023-08-01', 'Absent'),
(106, '2023-08-02', 'Present'),
(106, '2023-08-03', 'Present'),
(107, '2023-08-01', 'Present'),
(107, '2023-08-02', 'Present'),
(107, '2023-08-03', 'Absent');

-- Section 1
show tables;
select * from employees;
select * from departments;
select * from projects;
select * from employeeprojects;
select * from salaries;
select * from attendance;

-- 1. Retrieve the names of all employees who have a salary greater than $50,000.
select * from employees where salary> 50000;

-- 2. List all employees who joined after January 1st, 2023.
select * from employees where HireDate > '2023-01-01';

-- 3. Find the names of employees who work in the "Sales" department.
select * from employees where DepartmentID in (select DepartmentId from Departments where DepartmentName='Sales');

-- 4. Get the total number of employees in each department.
-- join along with group by clause -- very very important 
select d.DepartmentName,count(e.EmployeeID) as TotalEmp from Departments d left join Employees e on d.DepartmentID = e.DepartmentID group by d.DepartmentName;

-- 5. Find the average salary of employees in each department.
select d.DepartmentName,avg(e.Salary) as AverageSalary from Departments d left join Employees e on d.DepartmentID = e.DepartmentID group by d.DepartmentName;

-- 6. List the names of employees who have not been assigned to any project.
select * from employees where EmployeeId not in (select EmployeeID from EmployeeProjects);

-- 7. Get the list of employees who have worked on more than 2 projects.
select * from employees where EmployeeId in (select EmployeeID from EmployeeProjects group by EmployeeID having count(*)>1);

-- 8. Find the highest and lowest salary in each department.
-- to do later 

-- 9. List all projects along with the number of employees assigned to each project.
select P.ProjectName,count(EP.ProjectID) from Projects P inner join EmployeeProjects EP on P.ProjectID = EP.ProjectID group by P.ProjectName;

-- 10. Get the list of employees who have not attended work in the last 30 days.


-- 11. Find departments with more than 10 employees.
select D.DepartmentName,count(E.DepartmentID) as EmployeeCount from Departments D inner join employees E on D.DepartmentID = E.DepartmentID group by D.DepartmentName having  EmployeeCount>1;

-- 12. List employees who have the same job title as "John Doe."
select * from employees e1 where DepartmentID in (select DepartmentID from employees e2 where e2.EmployeeName = 'John Doe' and e1.EmployeeName != 'John Doe');
select * from employees where departmentid in (select departmentid from employees where employeename='John Doe') and employeename != 'John Doe';


-- 14. Get the list of employees who work in more than one department.

-- 15. List employees whose salary is below the average salary of their department.
-- select * from employees where salary < (select avg(salary) from employees group by DepartmentID);

SELECT e.EmployeeID, e.EmployeeName, e.DepartmentID, e.Salary
FROM Employees e
JOIN (
    SELECT DepartmentID, AVG(Salary) AS AvgSalary
    FROM Employees
    GROUP BY DepartmentID
) avg_salaries ON e.DepartmentID = avg_salaries.DepartmentID
WHERE e.Salary < avg_salaries.AvgSalary;



-- 16. Find the top 5 highest-paid employees.
select * from employees order by salary desc limit 5;

-- 17. List the names of employees who have been with the company for more than 5 years.
SELECT *
FROM Employees
WHERE DATEDIFF(CURDATE(), HireDate) > 5 * 365;

-- 18. Find the employees who have the highest salary in each department.
SELECT e.EmployeeID, e.EmployeeName, e.DepartmentID, e.Salary
FROM Employees e
JOIN (
    SELECT DepartmentID, max(Salary) AS maxSalary
    FROM Employees
    GROUP BY DepartmentID
) max_salaries ON e.DepartmentID = max_salaries.DepartmentID
WHERE e.Salary = max_salaries.maxSalary order by e.DepartmentID;

-- 19. List the departments that do not have any employees.

-- 20. Get the names of employees who have worked on the "Alpha" project.   (join + subquery)
select * from employees e inner join employeeprojects ep on e.EmployeeID = ep.EmployeeID where ep.ProjectID = (select ProjectID from Projects where ProjectName = 'Project Alpha') ;

-- 23. Find the total salary paid to all employees in the "Sales" department.
select sum(salary),D.DepartmentName from employees e inner join Departments D on e.DepartmentID = D.DepartmentID group by DepartmentName having DepartmentName = 'Sales';

-- 26. List the departments along with the total number of projects in each.
select D.DepartmentName,count(P.DepartmentID) TotalProjects from Projects P inner join Departments D on P.DepartmentID = D.DepartmentID group by D.DepartmentName;

-- 34. List employees whose salary is higher than the highest salary in the "Sales" department.
select * from employees where salary > (select max(salary) from employees e inner join Departments D on e.DepartmentID = D.DepartmentID where DepartmentName = 'Sales');



-- 35. Find departments where every employee has a salary above $60,000. 
SELECT d.DepartmentName
FROM Departments d
JOIN Employees e ON d.DepartmentID = e.DepartmentID
GROUP BY d.DepartmentName
HAVING MIN(e.Salary) > 60000;

-- 37. List employees who have worked on both the "Alpha" and "Beta" projects.

-- 38. Find departments where the average salary is above the average salary of the entire company.

-- 40. List employees who have worked on all projects in their department.

-- 42. List all departments along with the total number of employees and projects in each department.

-- 44. Find the department with the smallest number of employees.
SELECT d.DepartmentName,COUNT(e.EmployeeID)
FROM Departments d
JOIN Employees e ON d.DepartmentID = e.DepartmentID
GROUP BY d.DepartmentID, d.DepartmentName
ORDER BY COUNT(e.EmployeeID);    -- limit 1

-- 45. List the names of employees who joined on the same day as another employee.

-- 46. Get the list of projects with at least one employee who has a salary above $80,000.

-- 47. Find the average number of projects each employee is working on.


-- 49. Get the total salary paid to employees in each department in the year 2023.



-- section 2

-- ### **String Functions**

-- 1. **Convert all employee names to uppercase.**
select upper(EmployeeName) from employees;

-- 2. **Find the length of each employee's name.**
select EmployeeName,length(EmployeeName) from employees;

-- 3. **Extract the first three characters of each employee's name.**
select EmployeeName,substr(EmployeeName,1,3) from employees;

-- 4. **Concatenate the first and last names of employees with a space in between.**

-- 5. **Replace all occurrences of 'John' with 'Jonathan' in employee names.**
select replace(EmployeeName,'John','Jonathan') from employees;
select * from employees;

-- 6. **Trim leading and trailing spaces from employee names.**
-- ltrim and rtrim

-- 7. **Find the position of the first occurrence of the letter 'a' in employee names.**
 -- locate
 
-- 8. **Convert all department names to lowercase.**
 -- lower()
 
-- 9. **Check if employee names start with the letter 'J'.**
select * from employees where EmployeeName like 'J%';

-- 10. **Extract the domain name from employee email addresses.**
-- very important
select substr('pranavbhiungade2003@gmail.com',1,LOCATE('@','pranavbhiungade2003@gmail.com' )-1);

-- 11. **Pad employee ID numbers with leading zeros to make them 5 digits long.**
-- 12. **Reverse the characters in employee names.**
select reverse('pranav');

-- 13. **Find employee names that contain the substring 'son'.**
select EmployeeName from employees where EmployeeName like '%son%';

-- 14. **Split employee names into first and last names based on the space character.**

-- 15. **Count the number of occurrences of the letter 'e' in department names.**
SELECT SUM(LENGTH('pranavbhiungade') - LENGTH(REPLACE('pranavbhiungade', 'e', '')));

-- 16. **Remove all spaces from employee names.**

-- 17. **Check if employee names end with 'Smith'.**

-- 18. **Extract the last four characters of employee phone numbers.**

-- 19. **Replace all vowels in employee names with '*'.**


-- 20. **Format employee names to capitalize the first letter of each word.**
SELECT CONCAT(UPPER(SUBSTRING('pranav', 1, 1)), LOWER(SUBSTRING('bhiungade', 2)));


-- ### **Date Functions**

-- 21. **Find the current date and time.**
select current_date();
select current_time();

-- 22. **Extract the year from the employee hire date.**
select year('2024-08-17');

-- 23. **Calculate the number of days between today and each employee's hire date.**
select datediff('2024-08-17','2024-08-11') as Days;

-- 24. **Add 6 months to each employee's hire date.**
select DATE_ADD('2024-08-17', INTERVAL 6 MONTH);

-- 25. **Find the first day of the month for each employee's hire date.**
select day('2023-08-17');
select month('2023-08-17') as Month;

-- section 3

-- ### **Joins**

-- 1. **Retrieve the names of employees along with their manager's name.**
SELECT e.employee_name AS employee_name,
       m.employee_name AS manager_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;
-- self join 


-- 4. **Get the details of employees who work in departments where the average salary is above $60,000.**
-- 5. **List all departments with their associated employees and include departments with no employees.**
-- 6. **Find the highest salary in each department and list the employees earning that salary.**
-- select * from employees e inner join (select DepartmentID,max(salary) as maxSal from employees group by DepartmentID) as t where ;
-- very important

SELECT e.employeename,
       e.departmentid,
       e.salary
FROM employees e
JOIN (
    SELECT departmentid, MAX(salary) AS max_salary
    FROM employees
    GROUP BY departmentid
) d ON e.departmentid = d.departmentid AND e.salary = d.max_salary;

-- 9. **Get the names of all employees and their corresponding department names, including those who have not been assigned a department.**
select * from employees e left join departments d on e.departmentID = d.departmentID;



